// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using CTCA.Telehealth.Microsoft.Models;
//
//    var welcome = Welcome.FromJson(jsonString);

namespace CTCA.Telehealth.Microsoft.Models
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class MicrosoftMeetingResponse
    {
        [JsonProperty("@odata.context")]
        public Uri OdataContext { get; set; }

        [JsonProperty("id")]
        public string Id { get; set; }

        [JsonProperty("creationDateTime")]
        public DateTimeOffset CreationDateTime { get; set; }

        [JsonProperty("startDateTime")]
        public DateTimeOffset StartDateTime { get; set; }

        [JsonProperty("endDateTime")]
        public DateTimeOffset EndDateTime { get; set; }

        [JsonProperty("joinUrl")]
        public Uri JoinUrl { get; set; }

        [JsonProperty("joinWebUrl")]
        public Uri JoinWebUrl { get; set; }

        [JsonProperty("subject")]
        public string Subject { get; set; }

        [JsonProperty("isBroadcast")]
        public bool IsBroadcast { get; set; }

        [JsonProperty("autoAdmittedUsers")]
        public string AutoAdmittedUsers { get; set; }

        [JsonProperty("outerMeetingAutoAdmittedUsers")]
        public object OuterMeetingAutoAdmittedUsers { get; set; }

        [JsonProperty("capabilities")]
        public List<object> Capabilities { get; set; }

        [JsonProperty("videoTeleconferenceId")]
        public object VideoTeleconferenceId { get; set; }

        [JsonProperty("externalId")]
        public object ExternalId { get; set; }

        [JsonProperty("meetingInfo")]
        public object MeetingInfo { get; set; }

        [JsonProperty("joinInformation")]
        public JoinInformation JoinInformation { get; set; }

        [JsonProperty("participants")]
        public Participants Participants { get; set; }

        [JsonProperty("audioConferencing")]
        public AudioConferencing AudioConferencing { get; set; }

        [JsonProperty("chatInfo")]
        public ChatInfo ChatInfo { get; set; }
    }

    public partial class AudioConferencing
    {
        [JsonProperty("conferenceId")]
        //[JsonConverter(typeof(ParseStringConverter))]
        public long ConferenceId { get; set; }

        [JsonProperty("tollNumber")]
        public string TollNumber { get; set; }

        [JsonProperty("tollFreeNumber")]
        public object TollFreeNumber { get; set; }

        [JsonProperty("dialinUrl")]
        public Uri DialinUrl { get; set; }
    }

    public partial class ChatInfo
    {
        [JsonProperty("threadId")]
        public string ThreadId { get; set; }

        [JsonProperty("messageId")]
        //[JsonConverter(typeof(ParseStringConverter))]
        public long MessageId { get; set; }

        [JsonProperty("replyChainMessageId")]
        public object ReplyChainMessageId { get; set; }
    }

    public partial class JoinInformation
    {
        [JsonProperty("content")]
        public string Content { get; set; }

        [JsonProperty("contentType")]
        public string ContentType { get; set; }
    }

    public partial class Participants
    {
        [JsonProperty("organizer")]
        public Organizer Organizer { get; set; }

        [JsonProperty("attendees")]
        public List<object> Attendees { get; set; }
    }

    public partial class Organizer
    {
        [JsonProperty("upn")]
        public string Upn { get; set; }

        [JsonProperty("identity")]
        public Identity Identity { get; set; }
    }

    public partial class Identity
    {
        [JsonProperty("phone")]
        public object Phone { get; set; }

        [JsonProperty("guest")]
        public object Guest { get; set; }

        [JsonProperty("encrypted")]
        public object Encrypted { get; set; }

        [JsonProperty("onPremises")]
        public object OnPremises { get; set; }

        [JsonProperty("applicationInstance")]
        public object ApplicationInstance { get; set; }

        [JsonProperty("application")]
        public object Application { get; set; }

        [JsonProperty("device")]
        public object Device { get; set; }

        [JsonProperty("user")]
        public User User { get; set; }
    }

    public partial class User
    {
        [JsonProperty("id")]
        public Guid Id { get; set; }

        [JsonProperty("displayName")]
        public object DisplayName { get; set; }

        [JsonProperty("tenantId")]
        public Guid TenantId { get; set; }

        [JsonProperty("identityProvider")]
        public string IdentityProvider { get; set; }
    }

    /**
    public partial class MicrosoftMeetingResponse
    {
        public static MicrosoftMeetingResponse FromJson(string json) => JsonConvert.DeserializeObject<MicrosoftMeetingResponse>(json, CTCA.Telehealth.Microsoft.Models.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this MicrosoftMeetingResponse self) => JsonConvert.SerializeObject(self, CTCA.Telehealth.Microsoft.Models.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class ParseStringConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            long l;
            if (Int64.TryParse(value, out l))
            {
                return l;
            }
            throw new Exception("Cannot unmarshal type long");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (long)untypedValue;
            serializer.Serialize(writer, value.ToString());
            return;
        }

        public static readonly ParseStringConverter Singleton = new ParseStringConverter();
    }
    **/
}
